strategy:
  description: "Validation avec Train/Test avec GridSearchCV"
  use_case: "Model avancé LSTM Bidirectional"

dataset:
  path: "./data/input/training.1600000.processed.noemoticon.utf-8.csv"
  text_column: "tweet"  # Exemple de colonne pour le texte
  label_column: "id"  # Exemple de colonne pour les étiquettes

preprocess:
  partitioner:
    output: "./data/output/partitions"        # Répertoire contenant les partitions générées par split_data.py
    strategy: "trainValTest"                 # Stratégie utilisée lors du partitionnement initial
  cleaner:
    output: "./data/output/processed"        # Répertoire où sauvegarder les partitions prétraitées
    glove_path: "./data/input/glove.twitter.27B.200d.txt"  # Chemin vers le modèle GloVe
    glove_threshold: 0.6                     # Seuil pour la similarité cosinus lors du nettoyage GloVe

resources:
  cpu_check_interval: 1                    # Intervalle pour surveiller l'utilisation du CPU (en secondes)
  random_state: 42

mlflow:
  trackingUri: "http://mlflow.local"
  # Ajoutez les informations d'identification si nécessaire
  # username: "admin"
  # password: "zLPGwPxNiQ"
  experiment:
    name: "p7-sentiment-analysis"
    run:
      name: "lstm_bidirectionnal"  # Nom de l'exécution MLflow
      description: "Training with LSTM bidirectionnelle"  # Description de l'exécution
      tags:  # Métadonnées supplémentaires
        modelType: "lstm_bidirectionnal"
        datasetVersion: "v1.0"


model:
  _target_: "bidirectionalLSTM"
  type: "bidirectional_lstm"
  vocab_size: 10000  # Taille du vocabulaire
  embedding_dim: 50
    - 128  # Augmenté pour plus de capacité
  dense_units: 64
  dropout_rate: 0.3
  output_activation: "sigmoid"
  loss_function: "binary_crossentropy"
  optimizer: "adam"
  metrics:
    - "accuracy"
  batch_size: 32
  epochs: 5

training:
  input: "data/output/train_ready_data.pkl"
  earlyStopping:
    enabled: true
    patience: 3
    monitor: "val_loss"
    mode: "min"

  thresholdStop:
    enabled: true
    threshold: 0.6           # Arrête si la précision est en dessous de 60%
    metric: "accuracy"       # Surveille la précision
    patience_batches: 20     # Autorise 20 mini-batches consécutifs avant l'arrêt

  learningRateScheduler:
    enabled: true
    factor: 0.5
    patience: 2
    min_lr: 1e-5
    monitor: "val_loss"

tuning:
  enabled: false
  type: "grid_search"
  grid_search:
    cv: 3
    verbosityLevel: 1
    parallelJobs: -1
    paramGrid:
      penalty: ["l1", "l2"]
      C: [0.1, 1, 10]
      solver: ["liblinear", "saga"]
      max_iter: [1000, 2000]

test:
  description: "Configuration de l'évaluation finale"
  # Seuil pour la classification binaire
  threshold: 0.5
 # Métriques à calculer
  metrics:
    - "accuracy"
    - "precision"
    - "recall"
    - "f1"
    - "roc_auc"
    -  "pr_auc"
  # Méthode de moyenne (pour le multi-class)
  averageMethod: "macro"
  # Contrôle de l'affichage ou non des courbes
  plots:
    confusionMatrix: true
    rocCurve: true
    prCurve: true

deploy:
  enabled: false
