import os
import logging
import psutil
import pandas as pd
from hydra import initialize, compose
from hydra.core.global_hydra import GlobalHydra
from partitioned_data import PartitionedData

# -------------------------
# Configurer le logging
# -------------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)
logger = logging.getLogger(__name__)

# ------------------------------------------------
# Fonction pour afficher les métriques système
# ------------------------------------------------
def log_system_metrics():
    """
    Affiche les métriques CPU et mémoire pour le monitoring.
    """
    cpu_usage = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    logger.info(f"CPU Usage: {cpu_usage}%")
    logger.info(
        f"Memory Usage: {memory.percent}% "
        f"(Total: {memory.total / (1024**3):.2f} GB, "
        f"Available: {memory.available / (1024**3):.2f} GB)"
    )

# ------------------------------------------------
# Fonction pour charger et nettoyer les données depuis un fichier CSV
# ------------------------------------------------
def load_data(input_path, text_column, label_column):
    """
    Charge les données d'un fichier CSV, supprime les tweets vides et vérifie les colonnes.

    Args:
        input_path (str): Chemin du fichier d'entrée.
        text_column (str): Nom de la colonne contenant les tweets.
        label_column (str): Nom de la colonne contenant les labels.

    Returns:
        X (pd.Series): Colonne de texte nettoyée.
        y (pd.Series): Colonne de labels associée.
    """
    logger.info(f"Chargement des données depuis {input_path}...")
    data = pd.read_csv(input_path)

    # Vérifier si les colonnes nécessaires sont présentes
    if text_column not in data.columns or label_column not in data.columns:
        raise ValueError(
            f"Les colonnes spécifiées ne sont pas présentes dans le fichier. "
            f"Colonnes trouvées : {list(data.columns)}"
        )

    # Supprimer les tweets vides
    logger.info("Suppression des tweets vides...")
    initial_size = len(data)
    data = data[~data[text_column].isna()]
    data = data[data[text_column].str.strip() != ""]
    logger.info(f"{initial_size - len(data)} tweets vides supprimés. Taille finale : {len(data)}")

    X = data[text_column]
    y = data[label_column]

    logger.info(f"Données chargées avec succès. Taille X: {len(X)}, Taille y: {len(y)}")
    return X, y

# ------------------------------------------------
# SCRIPT PRINCIPAL
# ------------------------------------------------
def main():
    # 1) Afficher les métriques système au démarrage
    log_system_metrics()

    # 2) Récupérer la config Hydra
    config_path = os.getenv('HYDRA_CONFIG_PATH', './config')
    strategy = os.getenv('HYDRA_STRATEGY', 'baseline')

    # Réinitialiser Hydra si déjà initialisé
    if GlobalHydra.instance().is_initialized():
        GlobalHydra.instance().clear()

    # Initialiser Hydra avec la stratégie choisie
    initialize(config_path=config_path, version_base=None)
    cfg = compose(config_name=strategy)

    logger.info(f"Stratégie sélectionnée : {strategy}")

    input_path = cfg.partitioner.input
    output_path = cfg.partitioner.output
    text_column = cfg.dataset.text_column
    label_column = cfg.dataset.label_column

    # Charger les données
    X, y = load_data(input_path, text_column, label_column)

    # ------------------------------------------------
    # Partitionnement basé sur la configuration
    # ------------------------------------------------
    metadata = {"source_file": input_path, "text_column": text_column, "label_column": label_column}

    # Créer les partitions avec PartitionedData
    partitioned_data = PartitionedData.create(X, y, cfg.partitioner, metadata)

    # Sauvegarder les données partitionnées
    partitioned_data.save(output_path)
    logger.info(f"Données partitionnées sauvegardées dans {output_path}")

if __name__ == "__main__":
    main()
